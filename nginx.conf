user bartuer;
worker_processes auto;
pid /run/nginx.pid;
#include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
    

	server {
		listen 80;
		server_name play.local;
		root /mnt/c/users/bartuer/local/src/http_socks5_proxy/static;
		index index.html;

		location = / {
			rewrite ^ /README.md last;
		}

		location = /check {
			default_type application/json;
			content_by_lua_block {
				local ok, cjson = pcall(require, "cjson.safe")
				if not ok or not cjson then
					ok, cjson = pcall(require, "cjson")
				end
				if not ok or not cjson then
					ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
					ngx.say('{"error":"cjson module not available"}')
					return
				end

				local specs = {
					{ name = "privoxy", host = "127.0.0.1", port = 8081, restart = "systemctl restart privoxy" },
					{ name = "azuresshproxy", host = "127.0.0.1", port = 8080, restart = "systemctl restart azuresshproxy" },
				}

				local services = {}

				for _, spec in ipairs(specs) do
					local result = {
						name = spec.name,
						host = spec.host,
						port = spec.port,
						attempts = {},
					}

					local function attempt(tag)
						local start = ngx.now()
						local sock = ngx.socket.tcp()
						sock:settimeout(200)
						local ok_raw, err = sock:connect(spec.host, spec.port)
						local ok_conn = ok_raw and true or false
						local elapsed = (ngx.now() - start) * 1000
						if ok_conn then
							sock:close()
						end
						local entry = {
							stage = tag,
							ok = ok_conn and true or false,
							message = ok_conn and "connected" or (err or "connection_failed"),
							elapsed_ms = math.floor(elapsed + 0.5),
						}
						result.attempts[#result.attempts + 1] = entry
						return ok_conn, entry.message
					end

					local ok_conn, message = attempt("initial")
					result.ok = ok_conn
					result.message = ok_conn and "listening" or message

					if not ok_conn and spec.restart then
						local restart = { command = spec.restart }
						local handle = io.popen(spec.restart .. " 2>&1")
						if handle then
							restart.output = handle:read("*a") or ""
							local success, reason, code = handle:close()
							restart.success = success and true or false
							restart.reason = reason
							restart.exit_code = code
						else
							restart.success = false
							restart.output = "popen_failed"
						end
						result.restart = restart

						ngx.sleep(0.3)
						ok_conn, message = attempt("post_restart")
						result.ok = ok_conn
						if ok_conn then
							result.message = "listening_after_restart"
						else
							result.message = "after_restart: " .. message
						end
					end

					services[#services + 1] = result
				end

				local overall = "ok"
				for _, svc in ipairs(services) do
					if not svc.ok then
						overall = "degraded"
						break
					end
				end

				local payload = {
					status = overall,
					timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
					services = services,
				}

				local body, err = cjson.encode(payload)
				if not body then
					ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
					ngx.say('{"error":"encoding_failed","details":"' .. (err or "unknown") .. '"}')
					return
				end
				ngx.say(body)
			}
		}
		

		location / {
			try_files $uri $uri/ /README.md =404;
		}

		location ~ \.md$ {
			default_type text/html;
			content_by_lua_block {
				local md_path = ngx.var.request_filename
				local file = io.open(md_path, "r")
				if not file then
					return ngx.exit(ngx.HTTP_NOT_FOUND)
				end
				file:close()
				local quoted_path = string.format('"%s"', md_path:gsub('"', '\\"'))
				local cmd = string.format("pandoc %s -f markdown -t html", quoted_path)
				local handle = io.popen(cmd)
				if not handle then
					return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
				end
				local html = handle:read("*a") or ""
				handle:close()
				if html == "" then
					return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
				end
				local function html_escape(str)
					return (str
						:gsub("&", "&amp;")
						:gsub("<", "&lt;")
						:gsub(">", "&gt;")
						:gsub('"', "&quot;")
						:gsub("'", "&#39;")
					)
				end
				local basename = md_path:match("([^/]+)$") or "Document"
				local title = html_escape(basename)
				local css_href = "/markdown.css"
				local head = ([[<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>%s</title><link rel="stylesheet" href="%s"></head><body><article class="markdown-body">]]):format(title, css_href)
				local response = head .. html .. "</article></body></html>"
				ngx.header.content_type = "text/html; charset=utf-8"
				ngx.say(response)
			}
		}
    }
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
#
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
